import os
from os import path
import sys
from PyQt5 import QtWidgets, uic, Qt
from PyQt5.QtWidgets import *
from PyQt5 import QtCore
import pyqtgraph as pg
import DroneThread
import WebCamThread
import FBWebScraperThread
import IGWebScraperThread 
import batteryGraphThread
import cleanDataThread
import loadModelsThread
from PyQt5.QtCore import QDir, Qt, QUrl, QTimer
from PyQt5.QtMultimedia import QMediaContent, QMediaPlayer
from PyQt5 import Qt
import shutil
import hog
import multiprocessing as mp
import threading
from PyQt5.QtCore import QPropertyAnimation

class Ui(QtWidgets.QDialog): # Main driver for our program
    def __init__(self): # initializing all the User Interface properties and variables to be used (constructor)
        super(Ui, self).__init__() # Call the inherited classes __init__ method
        mp.set_start_method('spawn')
        self.ParentLayout = QGridLayout() # This is the parent layout, we used it to dynamically alternate between widgets
        self.setLayout(self.ParentLayout) 
        self.startSplashScreen() 
        self.mainLayout = QtWidgets.QDialog() # Our main Layout is of type Dialog
        uic.loadUi('main.ui', self.mainLayout) # here we load the 'main.ui' file generated by QT Designer

        self.profileNames = [] # this will hold the list of ptofile names scanned as QListWidgetItem data type
        self.MappedModels = []

        self.mainLayout.label_2.setText("Disconnected")

        self.buttonStyleSheetActive = "background-color: white;  border: 1px solid #1186a5; border-radius: 10px; font-size: 12px;color: #1186a5;text-align: center;"
        self.buttonStyleSheetInActive = "background-color: white;  border: 1px solid #6ea17e; border-radius: 10px; font-size: 12px;color: #6ea17e;text-align: center;"

        self.buttonStyleSheetActiveSmall = "background-color: white; border: 1px solid #1186a5; border-radius: 7px; font-size: 12px;color: #1186a5;text-align: center;"
        self.buttonStyleSheetInActiveSmall = "background-color: white; border: 1px solid #6ea17e; border-radius: 7px; font-size: 12px;color: #6ea17e;text-align: center;"

        self.FillWidgetsStyleSheet = "background-color : white; border: 3px solid #1186a5"

        self.mainLayout.label_11.setStyleSheet(self.FillWidgetsStyleSheet)
        self.mainLayout.listWidget.setStyleSheet("background-color : white; border-left: 3px solid #1186a5; border-top: 3px solid #1186a5; border-bottom: 3px solid #1186a5")
        self.mainLayout.LogText.setStyleSheet(self.FillWidgetsStyleSheet) 
        self.mainLayout.modelsList.setStyleSheet(self.FillWidgetsStyleSheet)
        self.mainLayout.searchTxt.setStyleSheet(self.FillWidgetsStyleSheet+"; border-radius: 10px")
        self.mainLayout.label_8.setStyleSheet("background-color : #bbbbbb; border-right: 3px solid #1186a5; border-top: 3px solid #1186a5; border-bottom: 3px solid #1186a5")
        self.mainLayout.batteryBox.parentWidget().setStyleSheet(self.FillWidgetsStyleSheet)
        self.mainLayout.topMatchesLayoutPerModel.parentWidget().setStyleSheet("#horizontalLayoutWidget_3 {"+self.FillWidgetsStyleSheet+"}")
        self.mainLayout.topMatchesLayout.parentWidget().setStyleSheet("#verticalLayoutWidget_2 {"+self.FillWidgetsStyleSheet+"}")



        self.NumOfModels = 0
        self.loadModelsThread = loadModelsThread.loadModelsThread()
        self.loadModelsThread.signal.connect(self.getModels)
        self.loadModelsThread.start()

        self.mainLayout.facesPBar.setMaximum(100) # This Progress Bar Activates when the program starts taking frames to generate a new Model
        self.mainLayout.facesPBar.setMinimum(0)
        self.mainLayout.facesPBar.setValue(0)
        self.mainLayout.facesPBar.setStyleSheet("QProgressBar::chunk { background: yellow; }")

        self.mainLayout.subjectTxt.setVisible(False)
        self.mainLayout.subjectImage.setVisible(False)
        self.mainLayout.hogButton.setVisible(False)
        self.mainLayout.cnnButton.setVisible(False)

        self.mainLayout.topMatchesLayoutPerModel.parentWidget().setVisible(False)
        self.mainLayout.topMatchesLayout.parentWidget().setVisible(False)

        self.BatteryPercentage = []
        self.secondsElapsed = []
        self.seconds = 0
        self.mainLayout.BatteryGraph = pg.PlotWidget()
        self.mainLayout.BatteryGraph.setBackground('w')
        self.mainLayout.BatteryGraph.setYRange(0,100)
        self.mainLayout.batteryBox.addWidget(self.mainLayout.BatteryGraph)

        self.FBWebScraperThread = FBWebScraperThread.FBWebScraperThread()
        self.FBWebScraperThread.signal.connect(self.add_name)

        self.DroneThread = DroneThread.DroneThread()
        self.DroneThread.upSignal.connect(self.setUpCoordTxt)
        self.DroneThread.downSignal.connect(self.setDownCoordTxt)
        self.DroneThread.leftSignal.connect(self.setLeftCoordTxt)
        self.DroneThread.rightSignal.connect(self.setRightCoordTxt)

        self.mainLayout.LogText.setReadOnly(True)

        self.WebCamThread = WebCamThread.WebCamThread(self.mainLayout.modelsList)
        self.WebCamThread.strLogSignal.connect(self.updateLogTxt)
        self.WebCamThread.upSignal.connect(self.setUpCoordTxt)
        self.WebCamThread.downSignal.connect(self.setDownCoordTxt)
        self.WebCamThread.leftSignal.connect(self.setLeftCoordTxt)
        self.WebCamThread.rightSignal.connect(self.setRightCoordTxt)
        self.WebCamThread.currentModelSignal.connect(self.displayMatches)
        self.WebCamThread.newModelSignal.connect(self.addModel)

        self.WebCamThread.pixSignal.connect(self.updateFrame)
        self.WebCamThread.ProgressBarSignal.connect(self.updateProgressBar)

        self.mainLayout.label_11.setScaledContents(True)
        self.mainLayout.subjectImage.setScaledContents(True)


        self.DroneThread.pixSignal.connect(self.updateFrame)

        self.IGWebScraperThread = None

        self.IGWebScraperWindow = None

        self.batteryGraphThread = batteryGraphThread.batteryGraphThread(self.DroneThread.get_drone())
        self.batteryGraphThread.signal.connect(self.plot_battery)

        self.cleanDataThread = cleanDataThread.cleanDataThread()
        self.cleanDataThread.signal.connect(self.add_name)
        self.cleanDataThread.removeSignal.connect(self.remove_name)
        self.cleanDataThread.modelsSignal.connect(self.updateModels)
        self.cleanDataThread.strLogSignal.connect(self.updateLogTxt)

        self.setUpListWidgets()

        self.mainLayout.listWidget.currentRowChanged.connect(self.onNameClicked)
        self.mainLayout.modelsList.currentRowChanged.connect(self.onModelClicked)

        self.mainLayout.horizontalSlider.setMinimum(50)
        self.mainLayout.horizontalSlider.setMaximum(200)
        self.mainLayout.horizontalSlider.setTickInterval(10)
        self.mainLayout.horizontalSlider.setSingleStep(10)
        self.mainLayout.horizontalSlider.valueChanged.connect(self.value_changed)

        self.mainLayout.searchTxt.textChanged.connect(self.searchNames)

        self.mainLayout.pushButton_1.clicked.connect(self.ActivateFBWebScraper)
        self.mainLayout.pushButton_1.setStyleSheet(self.buttonStyleSheetActive)
        self.mainLayout.pushButton_2.setStyleSheet(self.buttonStyleSheetActive)
        self.mainLayout.pushButton_3.setStyleSheet(self.buttonStyleSheetActive)
        self.mainLayout.pushButton_4.setStyleSheet(self.buttonStyleSheetActive)
        self.mainLayout.pushButton_5.setStyleSheet(self.buttonStyleSheetActive)
        self.mainLayout.hogButton.setStyleSheet(self.buttonStyleSheetActiveSmall)
        self.mainLayout.cnnButton.setStyleSheet(self.buttonStyleSheetActiveSmall)
        self.mainLayout.pushButton.setStyleSheet(self.buttonStyleSheetActive)
        self.mainLayout.cleanDataBtn.setStyleSheet(self.buttonStyleSheetActive)
        self.mainLayout.cleanDataBtn.clicked.connect(self.ActivateCleaningDataThread)

        self.mainLayout.pushButton_2.clicked.connect(self.ActivateIGWebScraper)
        self.mainLayout.pushButton_3.clicked.connect(self.TakeOff)
        self.mainLayout.pushButton_4.clicked.connect(self.Land)
        self.mainLayout.pushButton_5.clicked.connect(self.ActivateWebCamThread)
        self.mainLayout.pushButton.clicked.connect(self.ConnectDrone)

        self.mainLayout.hogButton.clicked.connect(self.ActivatehogThread)
        self.mainLayout.cnnButton.clicked.connect(self.ActivatecnnThread)
        
        self.mainLayout.hogButton.setFixedSize(Qt.QSize(70,20))
        self.mainLayout.cnnButton.setFixedSize(Qt.QSize(70,20))

        self.currentModel = None
        self.MappedNames = []
        self.anims=[]
        self.currentModelNum = 0
        self.isProgressStr = False


        self.mainLayout.right.setVisible(False)
        self.mainLayout.left.setVisible(False)
        self.mainLayout.up.setVisible(False)
        self.mainLayout.down.setVisible(False)


    @QtCore.pyqtSlot(str,name = "strLogSignal")
    def updateLogTxt(self, message): 
        # Anything that needs to be added to the Log will be sent as a str
        if 'progress' in message and self.isProgressStr : # override last line with this line
            self.mainLayout.LogText.moveCursor(self.mainLayout.LogText.textCursor().End,self.mainLayout.LogText.textCursor().MoveAnchor)
            self.mainLayout.LogText.moveCursor(self.mainLayout.LogText.textCursor().StartOfLine,self.mainLayout.LogText.textCursor().MoveAnchor)
            self.mainLayout.LogText.moveCursor(self.mainLayout.LogText.textCursor().End,self.mainLayout.LogText.textCursor().KeepAnchor)
            self.mainLayout.LogText.textCursor().removeSelectedText()
            self.mainLayout.LogText.textCursor().deletePreviousChar()
            self.mainLayout.LogText.append(message)

        elif 'progress' in message and not self.isProgressStr :
            self.mainLayout.LogText.append(message)
            self.mainLayout.LogText.moveCursor(Qt.QTextCursor.End)
            self.isProgressStr = True
        
        else : 
            self.mainLayout.LogText.append(message)
            self.mainLayout.LogText.moveCursor(Qt.QTextCursor.End)
            self.isProgressStr = False


    @QtCore.pyqtSlot(Qt.QPixmap,name = "pixSignal")
    def updateFrame(self, frame):
        # These are the frames from our inputs (camera or drone)
        self.mainLayout.label_11.setPixmap(frame)

    def updateWindow(self):
        # We Switch from Splash Screen to our main UI
        self.ParentLayout.addWidget(self.mainLayout)
        self.showFullScreen()
        self.setStyleSheet("background : #adadad;")


    def ActivateCleaningDataThread(self):
        # Button that activates the thread
        if (path.isdir("profilepics/cleanData")):  
            shutil.rmtree("profilepics/cleanData") # We remove everything in our /cleadData folder, just in case our profilePics folder has new/deleted photos

        self.cleanDataThread.start()
        self.fade()



    def value_changed(self):
        # Changing the value of Frames per Model label
        self.mainLayout.label_6.setText(str(self.mainLayout.horizontalSlider.value()))

    def ActivateWebCamThread(self):
        # Button that activates the thread
        self.fade()
        self.WebCamThread.start()
        self.WebCamThread.isRunning = True

    @QtCore.pyqtSlot()
    def fade(self):
        # Just a fade effect for onclick button
        self.__fading_button = self.sender()  # enter the "fading button" state
        self.__fading_button.setWindowOpacity(0.5)
        QTimer.singleShot(300, self.unfade)

    def unfade(self):
        self.__fading_button.setWindowOpacity(1)
        self.__fading_button.setStyleSheet(self.buttonStyleSheetInActive)
        self.__fading_button = None  # exit the "fading button" state

    def startSplashScreen(self):
        # our splash screen that uses a local video file 'identivisionLogo.mp4'
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.resize(700,300)
        self.setStyleSheet("background : black;")
        self.mediaPlayer = QMediaPlayer(None, QMediaPlayer.VideoSurface)
        self.mediaPlayer.positionChanged.connect(self.on_pos_change)
        videoWidget = Qt.QVideoWidget()

        self.ParentLayout.addWidget(videoWidget)
        videoWidget.setGeometry(0,0,700,300)
        self.show()
        self.mediaPlayer.setMedia(QMediaContent(QUrl.fromLocalFile(os.getcwd()+"/identivisionLogo.mp4")))
        self.mediaPlayer.setVideoOutput(videoWidget)
        self.mediaPlayer.play()
        

    def searchNames(self):
        # We search for anything that matches the search input in our List of profile names
        searchValue = self.mainLayout.searchTxt.toPlainText()
        matchedNames = self.mainLayout.listWidget.findItems(searchValue, QtCore.Qt.MatchContains)
        for name in self.profileNames : 
            if name not in matchedNames:
                name.setHidden(True)
            else:
                name.setHidden(False)

    def ActivatehogThread(self):
        waitThread = threading.Thread(target=self.waitForResult, args=('hog',))
        waitThread.start()


    def ActivatecnnThread(self):
        waitThread = threading.Thread(target=self.waitForResult, args=('cnn',))
        waitThread.start()


    def waitForResult(self, algorithm_type):
        manager = mp.Manager()
        return_dict = manager.dict()
        process = hog.hogProcess(algorithm_type, return_dict)
        process.MappedNames = self.MappedNames
        process.ModelNum = self.currentModelNum
        process.start()
        while True:
            if return_dict :
                print(return_dict.values())
                return 

    def AnimatePosition(self, widget, start, end):
        anim = QPropertyAnimation(widget, b"geometry")
        anim.setDuration(500)
        anim.setStartValue(start)
        anim.setEndValue(end)
        self.anims.append(anim)

    def executeAnimations(self):
        for anim in self.anims:
            anim.start()

    def displayMatches(self, model):
        # Once the models have their names matched we display top 5 matches
        counter = 0
        names = []

        if(self.WebCamThread.isRunning and not self.mainLayout.topMatchesLayout.parentWidget().isVisible()):
            self.anims = []
            self.AnimatePosition(self.mainLayout.label_11, self.mainLayout.label_11.geometry(), Qt.QRect(790,60,591,421))
            self.AnimatePosition(self.mainLayout.facesPBar, self.mainLayout.facesPBar.geometry(), Qt.QRect(800,810,591,20))
            self.AnimatePosition(self.mainLayout.pushButton_3, self.mainLayout.pushButton_3.geometry(), Qt.QRect(830,560,113,32))
            self.AnimatePosition(self.mainLayout.pushButton, self.mainLayout.pushButton.geometry(), Qt.QRect(1010,560,151,32))
            self.AnimatePosition(self.mainLayout.pushButton_4, self.mainLayout.pushButton_4.geometry(), Qt.QRect(1220,560,113,32))
            self.AnimatePosition(self.mainLayout.pushButton_5, self.mainLayout.pushButton_5.geometry(), Qt.QRect(1029,10,113,32))
            self.AnimatePosition(self.mainLayout.LogText, self.mainLayout.LogText.geometry(), Qt.QRect(790,660,591,131))
            self.AnimatePosition(self.mainLayout.label_14, self.mainLayout.label_14.geometry(), Qt.QRect(1067,625,41,16))
            self.mainLayout.right.setVisible(False)
            self.mainLayout.left.setVisible(False)
            self.mainLayout.up.setVisible(False)
            self.mainLayout.down.setVisible(False)
            self.mainLayout.topMatchesLayout.parentWidget().setVisible(True)
            matchesGeometry = self.mainLayout.topMatchesLayout.parentWidget().geometry()
            self.AnimatePosition(self.mainLayout.topMatchesLayout.parentWidget(), Qt.QRect(matchesGeometry.x(), matchesGeometry.y(),0, matchesGeometry.height()), Qt.QRect(matchesGeometry))
            self.executeAnimations()

        for i in reversed(range(self.mainLayout.topMatchesLayout.count())): 
            self.mainLayout.topMatchesLayout.itemAt(i).layout().setParent(None)  
            
        for name, confidence in model.mappedNames:

            names.append(name)

            container = QVBoxLayout()
    
            label = QLabel()
            label.setScaledContents(True)
            label.setPixmap(Qt.QPixmap("profilepics/"+name+".jpg"))
            nameLabel = QLabel()
            nameLabel.setText(name+"\n"+str(int(confidence)))
            nameLabel.setStyleSheet("color : white; background-color: #dfdfdf;")
            nameLabel.setAlignment(QtCore.Qt.AlignCenter)
            container.addWidget(label)
            container.addWidget(nameLabel)
            self.mainLayout.topMatchesLayout.addLayout(container)

            counter = counter+1
            if(counter>4):
                break
        self.mainLayout.topMatchesLayout.parentWidget().setStyleSheet("#verticalLayoutWidget_2 {background-color: #dfdfdf; padding:1px;}")




    def getHogResult(self, name):
        print(name)         
            
    def on_pos_change(self, pos):
        # just to keep track of the Splash Screen video timer
        if (pos > 1950):
            self.mediaPlayer.stop()
            for i in reversed(range(self.ParentLayout.count())): 
                self.ParentLayout.itemAt(i).widget().setParent(None)

            self.updateWindow()

    def updateProgressBar (self, value):
        # Changing the value of Frames per Model Progress Bar
        self.mainLayout.facesPBar.setValue(value+1)
        if (value == 100):
            self.mainLayout.facesPBar.setValue(0)

    def plot_battery(self, percentage):
        # This is used to display Battery level over time
        self.BatteryPercentage.append(percentage)
        self.mainLayout.lcdNumber.display(percentage)
        self.secondsElapsed.append(self.seconds)
        self.seconds = self.seconds+1
        pen = pg.mkPen(color=(255, 0, 0))
        self.mainLayout.BatteryGraph.setXRange(self.seconds-5, self.seconds+5)
        self.mainLayout.BatteryGraph.plot(self.secondsElapsed, self.BatteryPercentage, pen=pen)
 
    def add_name(self, name):
        # Adding a name to the List from the Scrapers
        item = QtWidgets.QListWidgetItem(name)
        self.mainLayout.listWidget.addItem(item)
        self.mainLayout.listWidget.scrollToItem(item)
        self.profileNames.append(QtWidgets.QListWidgetItem(name))

    def addModel(self, model):
        self.cleanDataThread.addModel(model)

    def remove_name(self, name):
        # Remove a name from the list (this is used when 'Map Names' button is clicked, where names who's profile 
        # do not contain a face get removed)
        item = self.mainLayout.listWidget.findItems(name,Qt.Qt.MatchExactly)
        if item:
            self.mainLayout.listWidget.takeItem(self.mainLayout.listWidget.row(item[0]))

    def updateModels(self,models):
        # Here we get the models with their updated names after scanning the faces
        self.anims = []
        if(self.WebCamThread.isRunning and not self.mainLayout.topMatchesLayout.parentWidget().isVisible()):
            self.AnimatePosition(self.mainLayout.label_11, self.mainLayout.label_11.geometry(), Qt.QRect(790,60,591,421))
            self.AnimatePosition(self.mainLayout.facesPBar, self.mainLayout.facesPBar.geometry(), Qt.QRect(800,810,591,20))
            self.AnimatePosition(self.mainLayout.pushButton_3, self.mainLayout.pushButton_3.geometry(), Qt.QRect(830,560,113,32))
            self.AnimatePosition(self.mainLayout.pushButton, self.mainLayout.pushButton.geometry(), Qt.QRect(1010,560,151,32))
            self.AnimatePosition(self.mainLayout.pushButton_4, self.mainLayout.pushButton_4.geometry(), Qt.QRect(1220,560,113,32))
            self.AnimatePosition(self.mainLayout.pushButton_5, self.mainLayout.pushButton_5.geometry(), Qt.QRect(1029,10,113,32))
            self.AnimatePosition(self.mainLayout.LogText, self.mainLayout.LogText.geometry(), Qt.QRect(790,660,591,131))
            self.AnimatePosition(self.mainLayout.label_14, self.mainLayout.label_14.geometry(), Qt.QRect(1067,625,41,16))

            self.mainLayout.right.setVisible(False)
            self.mainLayout.left.setVisible(False)
            self.mainLayout.up.setVisible(False)
            self.mainLayout.down.setVisible(False)
            self.mainLayout.topMatchesLayout.parentWidget().setVisible(True)
            matchesGeometry = self.mainLayout.topMatchesLayout.parentWidget().geometry()
            self.AnimatePosition(self.mainLayout.topMatchesLayout.parentWidget(), Qt.QRect(matchesGeometry.x(), matchesGeometry.y(),0, matchesGeometry.height()), Qt.QRect(matchesGeometry))
       
        self.AnimatePosition(self.mainLayout.label_12, self.mainLayout.label_12.geometry(), Qt.QRect(50,300,60,16))
        self.AnimatePosition(self.mainLayout.modelsList, self.mainLayout.modelsList.geometry(), Qt.QRect(10,330,141,151))
        self.mainLayout.subjectImage.setVisible(True)
        self.mainLayout.subjectTxt.setVisible(True)
        self.mainLayout.topMatchesLayoutPerModel.parentWidget().setVisible(True)
        self.mainLayout.hogButton.setVisible(True)
        self.mainLayout.cnnButton.setVisible(True)
        self.WebCamThread.updateName()
        self.mainLayout.subjectImage.setStyleSheet("background-color: #dfdfdf; border:1px solid #2f2f2f; ")
        self.mainLayout.cleanDataBtn.setStyleSheet(self.buttonStyleSheetActive)
        self.WebCamThread.setModels(models)
        self.WebCamThread.updateName()
        self.MappedModels = models
        self.executeAnimations()

    def ActivateFBWebScraper(self):
        # Button that activates the thread
        self.fade()
        self.mainLayout.pushButton_1.setEnabled(False) 
        self.FBWebScraperThread.start()
    
    def ActivateIGWebScraper(self):
        # Button that activates the thread
        self.fade()
        self.IGWebScraperThread = IGWebScraperThread.IGWebScraperThread()
        self.IGWebScraperThread.signal.connect(self.add_name)
        self.IGWebScraperWindow = IGWebScraperThread.IGwindow(self.IGWebScraperThread)
        self.mainLayout.pushButton_2.setEnabled(False) 
        self.IGWebScraperWindow.show()
    
    def getModels (self, models):
        # Once the models are loaded (if there are any) in the memory, we pass them on
        self.cleanDataThread.setModels(models)
        self.WebCamThread.setModels(models)
        self.WebCamThread.updateName()


    def ConnectDrone(self):
        # Button that activates the thread
        self.fade()
        self.DroneThread.start()
        self.batteryGraphThread.start()

    def onModelClicked(self):
        # When a name is clicked from the list, we output its corresponding profile picture in the label
        modelNum = self.mainLayout.modelsList.currentItem().text().split('l')[1]
        PicPath = ("generated/"+modelNum+"/faces/0.jpg")
        image = Qt.QPixmap(PicPath)
        self.mainLayout.subjectImage.setPixmap(image)
        counter = 0
        names = []
        
        for i in reversed(range(self.mainLayout.topMatchesLayoutPerModel.count())): 
            self.mainLayout.topMatchesLayoutPerModel.itemAt(i).layout().setParent(None)  

        if (self.MappedModels):
            for x in self.MappedModels :
                 if x.name == str(modelNum) :
                    model = x

            for name, confidence in model.mappedNames:
                names.append(name)
                container = QVBoxLayout()
                label = QLabel()
                label.setScaledContents(True)
                label.setPixmap(Qt.QPixmap("profilepics/cleanData/"+name+".jpg"))
                nameLabel = QLabel()
                nameLabel.setStyleSheet("color : black; background-color: white;}")
                nameLabel.setText(name+"\n"+str(int(confidence)))
                nameLabel.setAlignment(QtCore.Qt.AlignCenter)
                container.addWidget(label)
                container.addWidget(nameLabel)
                container.setContentsMargins(QtCore.QMargins(3,3,3,3))
                container.setSpacing(1)
                self.mainLayout.topMatchesLayoutPerModel.addLayout(container)
                counter = counter+1
                if(counter>4):
                    break
            self.MappedNames = names 
            self.currentModelNum = modelNum



    def onNameClicked(self):
        # When a model is clicked from the list, we output its corresponding subject picture in the label
        PicsPath = ("profilepics/"+str(self.mainLayout.listWidget.currentItem().text())+".jpg")
        image = Qt.QPixmap(PicsPath)
        self.mainLayout.label_8.setPixmap(image)

    def TakeOff(self, frame):
        # Button that activates the drone's rotors 
        self.fade()
        self.DroneThread.get_drone().takeoff()

    def Land(self, frame):
        # Button that makes the drone land
        self.fade()
        self.DroneThread.get_drone().land()

    def setUpListWidgets(self):
        # Here we populate the list Widgets
        modelFiles = 0
        if (path.isdir('profilepics')):
            print("profilepics folder already exists !")
        else:
            os.mkdir('profilepics')
        
        photos = os.listdir("profilepics/")
        for photo in photos:
            self.mainLayout.listWidget.addItem(QtWidgets.QListWidgetItem(os.path.splitext(photo)[0]))
        
        for name in self.mainLayout.listWidget.findItems('', QtCore.Qt.MatchContains): # Apparently there is no function that gives us all the items ...
            self.profileNames.append(name)

        if (path.isdir('generated')):
            fileNums = os.listdir("generated")
            for num in fileNums :
                if (num != '.DS_Store'): # just some MacOS bs probably Windows to
                    modelFiles = modelFiles+1
                    model = os.listdir("generated/"+num+"/model/")
                    self.mainLayout.modelsList.addItem(QtWidgets.QListWidgetItem(os.path.splitext(model[0])[0]))
        if modelFiles == 0 :
            self.NumOfModels = 0
        else :
            self.NumOfModels = modelFiles - 1
        self.WebCamThread.setNumOfModels(self.NumOfModels)

# Those are signals that simulate how the drone will move based on the position of the face from our inputs

    @QtCore.pyqtSlot(int,name = "rightSignal")
    def setRightCoordTxt (self, val):
        self.mainLayout.right.setText(str(abs(val)))

    @QtCore.pyqtSlot(int,name = "leftSignal")
    def setLeftCoordTxt (self, val):
        self.mainLayout.left.setText(str(abs(val)))

    @QtCore.pyqtSlot(int,name = "upSignal")
    def setUpCoordTxt (self, val):
        self.mainLayout.up.setText(str(abs(val)))

    @QtCore.pyqtSlot(int,name = "downSignal")
    def setDownCoordTxt (self, val):
        self.mainLayout.down.setText(str(abs(val)))

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    window = Ui()
    app.exec_()
